- 과제 
	: //라벨링
	: //7개의 cp, 모델, weight save, load
	: //save 
		: //checkpoint , fit전 model, fit후 모델, weight
	: //load 
		: //model1 : cp
		: //model2 : fit후 model
		: //model3 : fit전 model + weight


# load_iris
	: from sklearn.datasets import load_iris
	: 꽃 데이터
	: 3개의 클래스가 있다.
	: 3가지의 꽃이름으로 구성되어있고 각각 0,1,2로 변환되어 있다.

# CV (Cross Validation) 
	: 교차검증
	: K-fold Cross Validation
	: 모든 데이터가 최소 한번은 테스트 하도록 한다
	: 데이터를 몇 개로 쪼갰느냐가 K-겹 교차검증의 K가 된다.

# Sigmoid
	: 활성화함수
	: 함수값이 (0, 1)로 제한된다.
	: 중간 값은 1/2이다.
	: S = 1/1+e^-z

# 이진분류
	: 원핫 X
	: activation : 'sigmoid'
	: loss = 'binary_crossentropy'
	: label이 0,1일때 사용된다. -> 예외도 있다.


# binary_crossentropy
	: 



# ModelCheckPoint
	: earlystopping의 단점을 보완하기위해 고안된것
	: epoch마다 monitor하고 싶은 수치가 최적의 값이면
	  모델(모델+weight)을 저장할 수 있다.
	: from tensorflow.keras.callbacks import ModelCheckpoint
	: modelpath = "./model/{epoch:02d}-{val_loss:.4f}.hdf5"
	  2d = 2자리수 정수, 4f = 소수 4째 자리까지  
	: mcp = ModelCheckpoint(filepath=modelpath, monitor='val_loss',
                                              save_best_only=True, mode="auto")
	  monitor : 모니터할 값, 
	  save_best_only : 수치가 가장 좋을 때 마다 저장한다.
	: fit()할 때 callbacks 파라미터에 넣어준다.

# 시각화




# model.save( filepath )
	: fit 전에 save하면 모델만 저장되지만 
            : fit다음에 save를 하면 모델과 가중치가 저장된다.

# load_model( filepath )
	: 저장된 모델을 불러올 수 있다.
	: 가중치가 있다면 compile, fit이 필요없다
	: 모델만 불러와서 compile, fit할 수 있다.
	: 모델만 불러온뒤 load_weights를 할 수 있다. 
	: checkpoint의 모델(모델+가중치)을 불러올 수 있다.

# model.save_weights( filepath )
	: fit 이후에 가능하다.
	: 가중치를 저장할 수 있다.

# model.load_weights( filepath )
	: 저장된 가중치를 불러올 수 있다
	: 모델은 따로 선언해야한다.
	: compile부분 전에 사용해야한다.


# categorical_crossentropy
	: 다중분류 손실함수
	: softmax를 통해 나온 결과값과 실제값의 오차를 계산한다.














